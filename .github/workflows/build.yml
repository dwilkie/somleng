on: push
name: Build Somleng Adhearsion

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    env:
      AHN_ENV: test
      CI: true

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: Cache ruby gems
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-somleng-adhearsion-${{ hashFiles('Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-somleng-adhearsion-

      - name: Install dependencies
        run: |
          sudo apt-get -yqq install libpq-dev
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          yarn install

      - name: Run Specs
        run: |
          bundle exec rspec

      - name: Upload Test Coverage
        working-directory: ${{ env.working-directory }}
        continue-on-error: true
        env:
          CODACY_PROJECT_TOKEN: "${{ secrets.CODACY_PROJECT_TOKEN }}"
        run: |
          curl -Ls -o codacy-coverage-reporter "$(curl -Ls https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({name, browser_download_url} | select(.name | contains("codacy-coverage-reporter-linux"))) | .[0].browser_download_url')"
          chmod +x codacy-coverage-reporter
          ./codacy-coverage-reporter report -l Ruby -r coverage/lcov/*

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'

    strategy:
      matrix:
        app_env:
          - { identifier: 'somleng-adhearsion', name: 'production', branch: 'refs/heads/upgrade_infrastructure' }

    steps:
      - name: Checkout
        if: github.ref == matrix.app_env.branch
        uses: actions/checkout@v2-beta

      - name: Configure AWS credentials
        if: github.ref == matrix.app_env.branch
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        if: github.ref == matrix.app_env.branch
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        if: github.ref == matrix.app_env.branch
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          APP_ECR_REPOSITORY: somleng-adhearsion
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=app-image::$ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG"

      - name: Prepare app task definition
        if: github.ref == matrix.app_env.branch
        id: render-app-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deploy/${{ matrix.app_env.name }}/app_task_definition.json
          container-name: app
          image: ${{ steps.build-image.outputs.app-image }}

      - name: Prepare worker task definition
        if: github.ref == matrix.app_env.branch
        id: render-worker-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deploy/${{ matrix.app_env.name }}/worker_task_definition.json
          container-name: worker
          image: ${{ steps.build-image.outputs.app-image }}

      - name: Deploy App Server
        if: github.ref == matrix.app_env.branch
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-app-task-def.outputs.task-definition }}
          service: ${{ matrix.app_env.identifier }}-app
          cluster: somleng
          wait-for-service-stability: true

      - name: Deploy Worker
        if: github.ref == matrix.app_env.branch
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-task-def.outputs.task-definition }}
          service: ${{ matrix.app_env.identifier }}-worker
          cluster: somleng
          wait-for-service-stability: true
